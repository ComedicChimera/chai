import Buffer, Resource, RawPtr from core.runtime

pub of
    type __stdstring = &String

    type String = {
        priv bbuff: Buffer[byte]
        priv length: int
        priv const: bool
    }

    space for String is Seq[rune], Collection[rune, int], Resource of
        def new(ptr: RawPtr[byte], len, num_bytes: int, const: bool) &String = do
            let s = &String{}

            if ptr == null do
                s.bbuff = Buffer.[byte].new_empty(num_bytes)
            else
                s.bbuff = Buffer.new(ptr, num_bytes)
                
            s.length = len
            s.const = const

            return s

        def get_elem(s: &String, ndx: int) rune = do
            ...

        def iter(s: &String) Iter[rune] = do
            ...

        priv def copy(s: &String) &String = s

        priv def move(s: &String) &String = s

        priv def destroy(s: &String) =
            if s.const -> s.bbuff.free()

        def bytes(s: &String) List[byte] = s.bbuff.to_list()

        def runes(s: &String) List[rune] = do
            ...

        def byte_at(s: &String, ndx: int) byte = s.bbuff[ndx]
