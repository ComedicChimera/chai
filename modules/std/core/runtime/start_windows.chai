# This file contains the main entry point for all Chai programs denoted
# `_start`. The `_start` function handles everything that occurs before and
# after the user's `main` function is called.  

# It should be noted that `_start` is the actual primary entry point for Chai
# programs: there are no other assembly files that are invoked before this entry
# point.  Chai handles all of the necessary program logic itself with the help
# of some intrinsics.  This also technically means that Chai can run independent
# of its runtime provided some features are not used until properly initialized.
# Much of the code in this is written specifically to avoid calling a runtime
# which is not yet be fully initialized -- be careful when modifying code.  Some
# code which may appear odd or "non-idiomatic" is written in that manner
# intentionally.  

# TLDR: Do NOT modify this file unless you know what you are doing!

# TODO: add meta directives

# TODO: this will be moved into `cos.sys` at some point -- that way we can have
# only one start up file for the whole language.
@[extern, callconv("win64")]
def ExitProcess(code: u32) end

# `__chai_init` is a reference to a function that will be generated by Chai's
# backend.  It contains all the code necessary to call static initializers and
# the `init` functions of different packages.
@extern
def __chai_init() end

# `__chai_main` is a reference to the User's Main Function.  This will be
# resolved during linking later on (since packages are compiled as separate
# object files).
@extern
def __chai_main() end

@entry
def _start()
    # TODO: handle argc and argv

    # TODO: other runtime shenanigans

    # Global, static initialization.
    __chai_init()

    # Call to the user's main function.
    __chai_main()

    # TODO: runtime cleanup

    # Gracefully exit.
    ExitProcess(0)
end