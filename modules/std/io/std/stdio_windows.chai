# TODO: add meta directives

# System Bindings

@[extern, callconv("win64")]
def GetStdHandle(nStdHandle: u32) &u8 end

@[extern, callconv("win64")]
def WriteConsoleA(
    hConsoleOutput, lpBuffer: &u8, 
    nNumberOfCharsToWrite: u32, 
    lpNumberOfCharsWritten: &u32, 
    lpReserved: &u8
    ) bool end

# IO API (TODO: revise)

# stdout: The standard output handle.
let stdout: &u8 = GetStdHandle(-11 as u32)   

# Prints a single string to the console.
def puts(str: string)
    # This code is very suspect and not actually legal Chai, but I am too lazy
    # to implement the requisite features to make it work right now so *shrug*
    WriteConsoleA(stdout, __strbytes(str), __strlen(str), null, null)
end

# Prints a single ASCII (byte) character to the console.
def putb(b: u8)
    # Also somewhat suspect code: no buffered IO just yet :)
    WriteConsoleA(stdout, &b, 1, null, null)
end