package logging

// LogMessage is a generic interface representing all kinds of possible log
// messages and status updates.  The `display` method is private since it should
// only be called within this package by the logger
type LogMessage interface {
	// display should invoke the appropriate mechanism to print this message to
	// the console.  Their implementations are provided in display
	display()

	// isError indicates if this should be counted as an error or simply a
	// status update/feedback mechanism.  Non-error messages will be printed
	// after compilation is terminated
	isError() bool
}

// CompileMessage is a message that is specifically generated by the compiler to
// alert the user of some fault or possible issue with their code.  This is a
// standard compiler error.
type CompileMessage struct {
	Message  string
	Kind     int
	Position *TextPosition
	Context  *LogContext
	IsError  bool
}

// Enumeration of the different kinds of a compile messages
const (
	LMKToken    = iota // Error generating a token
	LMKSyntax          // Error parsing file
	LMKImport          // Error importing/lift-exporting package
	LMKTyping          // Error in type checking
	LMKImmut           // Error mutating an immutable value
	LMKName            // Error occurring due a misused/undefined name
	LMKMetadata        // Error occuring in metadata
	LMKUsage           // Error ocurring generally (due to some other rule)
	LMKUser            // Error caused by the user (through `!! warn`)
	LMKInterf          // Error related some specific interface behavior
	LMKGeneric         // Error related to a generic or generic instance
	LMKDef             // Error related to a definition in general
	LMKAnnot           // Error related to annotations
	LMKProp            // Error related to a property access
	LMKArg             // Error related to function argument
	// TODO: add more as needed
)

// TextPosition represents a positional range in the source text
type TextPosition struct {
	StartLn, StartCol int // starting line, starting 0-indexed column
	EndLn, EndCol     int // ending Line, column trailing token (one over)
}

// LogContext represents the context in which an error occurred
type LogContext struct {
	PackageID uint
	FilePath  string
}

func (cm *CompileMessage) isError() bool {
	return cm.IsError
}

// ConfigError is an error that is generated by the compiler to represent some
// fault with the user's initial configuration.  This error could indicate
// missing or corrupt essential files (grammar, module file, etc.) or an error
// that doesn't have a specific place within the program (eg. an empty package).
type ConfigError struct {
	Kind    string
	Message string
}

func (ce *ConfigError) isError() bool {
	return true
}

// BuildWarning is a warning that is generated during the build process that
// refers to no specific location within the module (or no location that can be
// pointed to)
type BuildWarning struct {
	Kind    string
	Message string
}

func (bw *BuildWarning) isError() bool {
	return false
}

// FatalError is an error that should cause compilation to exit immediately and
// is not a normal part of compilation behavior.  This should print a message
// prompting the user to report the issue to Github
type FatalError struct {
	// Component indicates which part of the compiler this error occurred in
	Component string

	Message string
}

func (fe *FatalError) isError() bool {
	return true
}
