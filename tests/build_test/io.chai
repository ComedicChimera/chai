# System Bindings

@[extern, callconv("win64")]
def GetStdHandle(nStdHandle: u32) &u8 end

@[extern, callconv("win64")]
def WriteConsoleA(
    hConsoleOutput, lpBuffer: &u8, 
    nNumberOfCharsToWrite: u32, 
    lpNumberOfCharsWritten: &u32, 
    lpReserved: &u8
    ) bool end

# IO API

# stdout is the standard output handle.
let stdout: &u8 = GetStdHandle(-11 as u32)   

# puts prints a single string to the console.
def puts(str: string)
    # This code is very suspect and not actually legal Chai, but I am too lazy
    # to implement the requisite features to make it work right now so *shrug*
    WriteConsoleA(stdout, __strbytes(str), __strlen(str), null, null)
end

# putb prints a single byte (ASCII) character to the console.
def putb(b: u8)
    # Also somewhat suspect code: no buffered IO just yet :)
    WriteConsoleA(stdout, &b, 1, null, null)
end

# putr prints a single rune to the console. 
# TODO: handle non-ASCII runes
def putr(r: i32) = putb(r as u8)

# puti prints an signed integer to the console.
def puti(a: i32)
    # A crude implementation to print an integer.  This will obviously be
    # refined for the final version, but it works for right now.

    if a < 0
        a = -a
        putr('-')
    end

    let pow = 1_000_000_000
    while pow > 0
        if a >= pow
            putr(a / pow % 10 + '0')
        end

        pow /= 10
    end
end