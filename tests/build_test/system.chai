# TODO: add metadata

# System Bindings

# TODO: fix these bindings to actually work

@[extern, callconv("win64")]
def ExitProcess(code: u32) end

@[extern, callconv("win64")]
def GetStdHandle(nStdHandle: u32) &u8 end

@[extern, callconv("win64")]
def WriteConsoleA(
    hConsoleOutput, lpBuffer: &u8, 
    nNumberOfCharsToWrite: u32, 
    lpNumberOfCharsWritten: &u32, 
    lpReserved: &u8
    ) bool end

# ----------------------------------------------------------------------------

# System API + Start up Code

let stdout: &u8 = GetStdHandle(-11 as u32)   

def puts(str: string)
    # This code is very suspect and not actually legal Chai, but I am too lazy
    # to implement the requisite features to make it work right now so *shrug*
    WriteConsoleA(stdout, __strbytes(str), __strlen(str), null, null)
end

@entry
def _start()
    # TODO: handle argc and argv

    # TODO: other runtime shenanigans

    # global, static initialization
    __init()

    # TODO: replace with intrinsic to link to main from any package and allow
    # for the main form agnostic passing arguments and expecting of exit codes
    main()

    # TODO: runtime cleanup

    # gracefully exit
    ExitProcess(0)
end